{
"__format": ".pl", 
"__rel_path": "/srv/local/pl/premierlangage/home/Yggdrasil/AAAA/Anna/pluseiurschamps.pl", 
"__comment": "", 
"__dependencies": ["/srv/local/pl/premierlangage/home/Yggdrasil/AAAA/Anna/pluseiurschamps.pl", "utils/sandboxio.py"], 
"__extends": [], 
"grader": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle, time\n\nfrom sandboxio import output, get_context, get_answers\n\n\nclass StopEvaluatorExec(Exception):\n    pass\n\n\ndef add_try_clause(code, excpt):\n    \"\"\"Add a try/except clause, excepting 'excpt' around code.\"\"\"\n    code = code.replace('\\t', '    ')\n    return (\"try:\\n\" + '\\n'.join([\"    \" + line for line in code.split('\\n')])\n            + \"\\nexcept \" + excpt.__name__ + \":\\n    pass\")\n\n\nmissing_evaluator_stderr = \"\"\"\\\nThe key 'evaluator' was not found in the context.\nWhen using this grader, the PL must declare a script inside a key 'evaluator'. This script have\naccess to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\n\nmissing_grade_stderr = \"\"\"\\\n'evaluator' did not declare the variable 'grade'.\nThe script have access to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 5:\n        msg = (\"Sandbox did not call grader properly:\\n\"\n               +\"Usage: python3 grader.py [input_json] [answer_jsonfile] [output_json] [feedback_file]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    \n    dic = get_context()\n    dic['response'] = get_answers()\n\n    if 'evaluator' in dic:\n        glob = {}\n        dic['StopEvaluatorExec'] = StopEvaluatorExec\n        exec(add_try_clause(dic['evaluator'], StopEvaluatorExec), dic)\n        exec(\"\", glob)\n        for key in glob:\n            if key in dic and dic[key] == glob[key]:\n                del dic[key]\n    else:\n        print(missing_evaluator_stderr, file=sys.stderr)\n        sys.exit(1)\n    \n    if 'grade' not in dic:\n        print(missing_grade_stderr, file=sys.stderr)\n        sys.exit(1)\n    \n    output(dic['grade'][0], dic['grade'][1], dic)\n\n\n", 
"builder": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle\nfrom sandboxio import get_context\n\nclass StopBeforeExec(Exception):\n    pass\n\n\ndef add_try_clause(code, excpt):\n    \"\"\"Add a try/except clause, excepting 'excpt' around code.\"\"\"\n    code = code.replace('\\t', '    ')\n    return (\"try:\\n    ...\\n\" + '\\n'.join([\"    \" + line for line in code.split('\\n')])\n            + \"\\nexcept \" + excpt.__name__ + \":\\n    pass\")\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        msg = (\"Sandbox did not call builder properly:\\n\"\n               +\"Usage: python3 builder.py [input_json] [output_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    output_json = sys.argv[2]\n    \n    dic = get_context()\n\n    if 'before' in dic:\n        glob = {}\n        #dic['StopBeforeExec'] = StopBeforeExec\n        #exec(add_try_clause(dic['before'], StopBeforeExec), dic)\n        exec(dic['before'],dic)\n        exec(\"\", glob)\n        for key in glob:\n            if key in dic and dic[key] == glob[key]:\n                del dic[key]\n    else:\n        print((\"Builder 'before' need a script declared in the key 'before'. \"\n               + \"See documentation related to this builder.\"),\n              file = sys.stderr)\n        sys.exit(1)\n\n    with open(output_json, \"w+\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n    \n    sys.exit(0)\n\n", 
"editor": {"cid": "9b1cdf4b-b3dc-4010-bd3c-5f561cd7072e", "selector": "c-code-editor", "theme": "dark", "placeholder": "L'\u00e9nonc\u00e9", "language": "python", "code": "# write your code here"}, 
"inputbox": {"cid": "9eb346b7-b1f3-4f55-8a3c-b884fa656d03", "selector": "c-input", "type": "text", "placeholder": "Titre", "maxlength": "2", "appearance": "outline"}, 
"before": "", 
"title": "Input Component", 
"text": "Enter the result of ** {{ a\u00a0}} + {{\u00a0b\u00a0}} ** inside the input box.", 
"form": "{{ inputbox|component}}\n{{ editor|component }}", 
"evaluator": "text=\"\"\ntitle=\"\"\nform=\"\"\nfeedback = f\"\"\"\n\ntitle={inputbox.value}     \ntext== . . \n{editor.code} . .  \\n== . . \n\n\"\"\"\n\ngrade = (100, feedback)", 
"seed": 79
}
