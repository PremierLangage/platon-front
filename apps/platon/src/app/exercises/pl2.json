{
    "__format": ".pl",
    "__rel_path": "/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/concept/input/plusmoins.pl",
    "__comment": "\n# Boris Jabot 11/09/2019 KO\n# Copyright 2016 Dominique Revuz <dr@univ-mlv.fr>",
    "__files": {
        "grader.py": "#!/usr/bin/env python3\n# coding: utf-8\nimport sys, json, jsonpickle, time\nfrom sandboxio import output, get_context, get_answers\n\nfrom gradesoluce import *\n\nmissing_evaluator_stderr = \"\"\"\\\nThe key 'evaluator' was not found in the context.\nWhen using this grader, the PL must declare a script inside a key 'evaluator'. This script have\naccess to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\nmissing_grade_stderr = \"\"\"\\\n'evaluator' did not declare the variable 'grade'. \nThe script have access to every variable declared in the PL and its 'before' script.\nIt should declare a variable 'grade' which should contain a tuple (int, feedback) where int is the grade between [0, 100].\"\"\"\nif __name__ == \"__main__\":\n    if len(sys.argv) < 5:\n        msg = (\"Sandbox did not call grader properly:\\n\"\n               + \"Usage: python3 grader.py [input_json] [output_json] [answer_file] [feedback_file]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n\n\n    dic = get_context()\n    if \"plsoluce\" not in dic and \"mplsoluce0\" not in dic :\n        print(\"No plsoluce or mplsoluce0 in dic  necessary for this template \" , file=sys.stderr)\n        sys.exit(1)\n    if \"soluce\" not in dic and not os.exist(\"soluce.py\"):\n        print(\"No soluce or file soluce.py  necessary for this template \" , file=sys.stderr)\n        sys.exit(1)\n    if \"soluce\" in dic:\n        with open(\"soluce.py\",\"w\") as sol:\n            sol.write(dic['soluce'])\n    lestest=[]\n    if \"plsoluce\" in dic:\n        for i,line in enumerate(dic['plsoluce'].split(\"\\n\")):\n            if line != \"\" : # problem with finishing empty line\n                if len(line.split('|')) != 2 :\n                    print(\" to many | \",len(line.split('|')) ,\"in test line \",i,\": \", str(beurkl), file=sys.stderr)\n                    sys.exit(1)\n                lestest.append(line.split('|'))\n    else:\n        for u in range(0,10): # FIXME IF U >10\n            xname = \"mplsoluce\"+str(u)\n            if xname  in dic:\n                mpvalue=dic[xname].split(\"\\n\")\n            else:\n                continue\n            lestest.append([mpvalue[0],\"\\n\".join(mpvalue[1:])])\n    student = get_answers()['answer']\n    with open(\"student.py\",\"w\") as sf:\n        sf.write(student)\n    import feedback2\n    fb=feedback2.FeedBack()\n    ret=runsolucetests(lestest,fb)\n\n   \n\n    output(ret, fb.render())\n\n\n\n\n\n\n",
        "gradesoluce.py": "# Comments\n\n# -*- coding: utf-8 -*-\n\n\nimport doctest\nimport subprocess\n\n\ndef execute(args, instr):\n    \"\"\"\n    :param args: the subprocess parameter\n    :param instr: the input file for the subprocess parameter\n    :return:\n        boolean: code de retour \n        stdout\n        stderr\n    \"\"\"\n    try:\n        p = subprocess.Popen(\" \".join(args), stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n                    stderr=subprocess.PIPE,shell= True)\n        sortieo,sortiee = p.communicate(input=instr.encode())\n        return p.returncode == 0, sortieo.decode(),sortiee.decode() \n    except Exception as e:\n        return False, \" \".join(args), str(e)\n\n\ndef executefromstring(code, inputstr, filename=\"dummy.py\"):\n    \"\"\"\n\n    :param code: Write code to file to be able to execute it\n    :param inputstr:\n    :return: (execok,stdout,stderr)\n    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(code)\n    return executefromfilename(filename, inputstr)\n\n\ndef executefromfilename(filename, input_str):\n    \"\"\"\n    :param filename: name of file to execute\n    :param input_str: input string\n    :return: (bool,stdout,stderr)\n    \"\"\"\n    return execute([\"python3\", filename], input_str)\n\n\ndef unitTestWithSoluce(testname, studentfilename, solucefilename, input_str, feedback ):\n    \"\"\"\n    :param: test name for the feedback\n    :param studentfilename: Must exist\n    :param solucefilename: Must exist\n    :param input_str:\n    :param: the feedback object\n    :return: if the test run smoothly\n    \"\"\"\n    b, o, e = executefromfilename(solucefilename, input_str)\n    if not b:\n        \"\"\"\n        the soluce is not working !!!\n        \"\"\"\n        feedback.addTestError(\"la soluce ne fonctionne pas\", \" Messages d'erreur \\n \"+ e,o)\n        return False\n    return unitTestWithOutput(testname, studentfilename, o, input_str, feedback )\n\n\ndef unitTestWithOutput(testname, studentfilename, outputstr, input_str, feedback ):\n    \"\"\"\n    :param: test name for the feedback\n    :param studentfilename: Must exist\n    :param outputstr: to compare student execution output with\n    :param input_str:\n    :param:  feedback: feedback object\n    :return: if the test run smoothly\n    \"\"\"\n\n    xb, xo, xe = executefromfilename(studentfilename, input_str)\n    if not xb:\n        feedback.addTestError(testname, \" Probl\u00e8mes avec votre code \\n \" + xo + \"\\n\" + xe, \"\")\n        return False\n    oc = doctest.OutputChecker()\n    res = oc.check_output(outputstr, xo, 0)\n    #print(\"inputstr:\", input_str,\"attendu:\", outputstr)\n    #print(\" recu:\",xo)\n    if res:\n        feedback.addTestSuccess(testname, xo, outputstr )\n        return True\n    else:\n        r = oc.output_difference(doctest.Example(\" le test\", outputstr), xo,0)\n        if r.startswith(\"Expected:\") and \"Got:\" in r :\n                want,got = r.split(\"Got:\")\n                want= want[9:]\n        else:\n                want=r\n                got=\"\"\n        feedback.addTestFailure(testname,got,want)\n        return False\n\n\ndef runsolucetests(tests, feedback, studentfilename=None, solucefilename=None, flags=0x1):\n    \"\"\"\n\n    :param tests: a list of tests (name, input_str)\n    :param: feedback: feedback object to pass to tester\n    :param studentfilename: if none student.py is used\n    :param solucefilename: if none soluce.py is used \n    :return: \n    \"\"\"\n    studentfilename = studentfilename if studentfilename else \"student.py\"\n    solucefilename = solucefilename if solucefilename else \"soluce.py\"\n    res = 0\n    for name, input_str in tests:\n        ok =  unitTestWithSoluce(name, studentfilename, solucefilename, input_str, feedback)\n        if not ok and flags:\n           # FIXME break  # arret sur le premier tests invalide \n           return 0\n        if ok:\n            res += 1\n\n    return 100*(res//len(tests))\n\ndef runsOutputtests(tests, feedback, studentfilename=None, flags=0x1):\n    \"\"\"\n\n    :param tests: a list of tests (name, inputstr, outputstr)\n    :param: feedback: feedback object to pass to tester\n    :param studentfilename: if none student.py is used\n    :return: \n    \"\"\"\n    studentfilename = studentfilename if studentfilename else \"student.py\"\n    res=0\n    for name, input_str, output_str in tests:\n        ok=   unitTestWithOutput(name, studentfilename, output_str, input_str, feedback)\n        if not ok and flags:\n            return 0  # arret sur le premier tests invalide \n        if ok:\n            res += 1\n            \n    return int(100*(res/len(tests)))\n\nif __name__==\"__main__\":\n   lestest=[(\"premier\",\"success\"),(\"pas beau\",\"failure\"),(\"Une erreur \",\"error\"),]\n   import feedback2\n   fb=feedback2.FeedBack()\n   runsolucetests(lestest,fb)\n   print(fb.render())\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "sandboxio.py": "# coding: utf-8\n\nimport sys, json, jsonpickle\nfrom components import Component\n\ndef get_answers():\n    \"\"\"Return a dictionnary containing every answer.\"\"\"\n    with open(sys.argv[2], \"r\") as f:\n        answers = json.load(f)\n    return answers\n\n\ndef get_context():\n    \"\"\"Return the dictionnary containing the context of the exercise.\"\"\"\n    with open(sys.argv[1], \"r\") as f:\n        context = json.load(f)\n    Component.sync_context(context)\n    return context\n\n\ndef output(grade, feedback, context=None):\n    \"\"\"Used to output the grade, feedback and context to the sandbox.\n    \n    Parameters:\n        grade - (int) Grade of the student. Should be an integer or implementing __int__.\n        feedback - (str) Feedback shown to the student. Should be a str or implementing __str__.\n        context - (dict - optionnal) Modified context of the exercise.\"\"\"\n    with open(sys.argv[3], \"w+\") as f:\n        f.write(jsonpickle.encode(context if context else get_context(), unpicklable=False))\n    \n    with open(sys.argv[4], \"w+\") as f:\n        print(str(feedback), file=f)\n    \n    print(int(grade))\n    \n    sys.exit(0)\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "builder.py": "#!/usr/bin/env python3\n# coding: utf-8\n\nimport sys, json, jsonpickle\n\n\nif __name__ == \"__main__\":\n    if len(sys.argv) < 3:\n        msg = (\"Sandbox did not call builder properly:\\n\"\n               +\"Usage: python3 builder.py [input_json] [output_json]\")\n        print(msg, file=sys.stderr)\n        sys.exit(1)\n    input_json = sys.argv[1]\n    output_json = sys.argv[2]\n    \n    with open(input_json, \"r\") as f:\n        dic = json.load(f)\n            \n    with open(output_json, \"w+\") as f:\n        f.write(jsonpickle.encode(dic, unpicklable=False))\n    \n    sys.exit(0)\n",
        "feedback2.py": "#!rusr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#   feedback2.py\n#  \n#  Copyright 2018 Dominique Revuz <dr@univ-mlv.fr>\n#\n\n\n\nimport jinja2\n\nERROR=\"error\"\nFAILURE=\"failure\"\nSUCCESS=\"success\"\nSYNTAX=\"syntax\"\n\n__doc__=\"\"\"\n\nLa classe feedback permet de gerer l'evolution de l'\u00e9valuation d'un exercice.\n\nOrganisation de l'\u00e9valuation d'un exercice de programmation:\n\nDeux parties:\n une partie erreurs:\n    -> erreur de compilation \n    -> erreur de r\u00e9ponse (r\u00e9f\u00e9rence manquante pour r\u00e9pondre \u00e0 la question)\n    -> erreur de regle [ une r\u00e8gle de l'\u00e9nonc\u00e9 \u00e0 \u00e9t\u00e9 d\u00e9tourn\u00e9e ]\n une partie Tests :\n    -> les tests ont \n        -> un num\u00e9ro \n        -> un affichage [ soit un texte, soit une ligne de code] \n        -> un etat [success, failure, error ]\n\n\nComment utiliser feedback2 \n\n    pour chaque test \n\"\"\"\n\n# class CompositeFeedback():\n\n\nclass FeedBack():\n    def __init__(self,name=\"\",filename=\"template.html\"):\n        self.tests = []\n        self.globalok = True  # if not true at least one problem\n        self.numtest = 0\n        self.name = str(name)\n        self.filename=filename\n        self.globalfeedback =\"\"\n\n    def addTestSuccess(self, text, got, want):\n        \"\"\"\n        :param text: the test name\n        :param got: result of execution\n        :param want: what was expected\n\n        add a  postive test result to the feedback\n        \"\"\"\n        self.numtest += 1\n        self.tests.append((SUCCESS, self.numtest, text, got, want))\n\n    def addTestFailure(self, text, got, want):\n        \"\"\"\n        :param text: the test name\n        :param got: result of execution\n        :param want: what was expected\n\n        add a negative test result to the feedback\n        \"\"\"\n        self.numtest += 1\n        self.globalok = False\n        self.tests.append((FAILURE, self.numtest, text, got, want))\n\n    def addTestError(self, text, error, para):\n        \"\"\"\n        :param text: the test name\n        :param error: the string version of the Exception that occured using format_exec\n        :param para: a text corellated to the state compilation error or execution error\n\n        add a  negative+error test result to the feedback\n        \"\"\"\n        self.globalok = False\n        self.numtest += 1\n        error = \"<br>\".join(error.split(\"\\n\"))\n        self.tests.append((ERROR, self.numtest, text, error, para))\n\n    def addTestSyntaxError(self, text, error, para):\n        \"\"\"\n        :param text: the test name\n        :param error: the Exception that occured\n        :param para: a text corellated to the state compilation error or execution error\n\n        add a  negative+error test result to the feedback\n        \"\"\"\n        self.globalok = False\n        self.numtest += 1\n        self.tests.append((SYNTAX, self.numtest, text, error, para))\n\n    def addGlobalFeedback(self,feedback):\n        self.globalfeedback += feedback\n\n    def _doTextOutput(self):\n            print(getOutout())\n\n    def getOutput(self):\n        s=\"\"\n        for e,n,t,x,y in self.tests:\n            s += \"Test num :\"+str(n)+\" \"+e+\" \"+t+\" \" +x+\" \"+ y +\"\\n\"\n        return s\n\n    def __str__(self):\n        return self.render()\n\n    def render(self):\n        with open(self.filename,\"r\") as tempfile:\n            templatestring = tempfile.read()\n        template = jinja2.Template(templatestring)\n        x= template.render(feedback=self)\n        return  x \n\n\n\n\n\n",
        "template.html": "<!-- default template used by the feedback code can be bypassed in  feedback class see documentation -->\n{% if feedback.globalok %}\n<div style=\"border:1px solid black;padding:0%;margin:1%;background-color:LightGreen;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-success\"\ndata-toggle=\"collapse\" data-target=\"#suite{{feedback.name}}\">\n{{feedback.name}} success\n</button>\n<div id=\"suite{{feedback.name}}\" class=\"collapse\">\n<div class=\"card card-success;\" style=\"background-color: LightGreen;\">\n{% else %}\n<div style=\"border:1px solid black;padding:1%;margin:1%;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block  btn-danger\"\naria-expanded=\"true\" aria-controls=\"suite{{feedback.name}}\"\ndata-toggle=\"collapse\" data-target=\"#suite{{feedback.name}}\">\n{{feedback.name}}  Failure\n</button>\n<div id=\"suite{{feedback.name}}\" class=\"show\">\n<div class=\"card card-danger;\" style=\"background-color: Tomato;\">\n{% endif %}   \n{% for type,num,text,got,want in feedback.tests %}\n{%  if type==\"failure\" %}\n<div style=\"border:1px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\naria-expanded=\"true\" aria-controls=\"demo{{feedback.name}}{{num}}\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text }} Failure\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger;\" style=\"background-color: Tomato;\">\n<p>{{text}}\n{% if want or got %}\n<br/> Attendu: {{want}}\n<br/> Obtenu: {{got}}\n{% endif %}\n</p>\n</div>\n</div>\n</div>\n{% endif %}\n{% if globalfeedback != \"\" %}\n<div style=\"border:1px white;padding:1px;margin:1px;background-color:LightBlue;border-radius:4px;\">\n{{ globalfeedback }}\n</div>\n{% endif %}\n{% if type==\"success\" %}\n<div style=\"border:1px white;padding:1px;margin:1px;background-color:LightGreen;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-success\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{text}} success\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"collapse\">\n<div class=\"card card-success;\" style=\"background-color: LightGreen;\">\n<p>{{text}}\n{% if want or got %}\n<br/> Attendu: {{want}}\n<br/> Obtenu: {{got}}\n{% endif %}\n</p>\n</div>\n</div>\n</div>\n{%  endif %}\n{% if type==\"error\"  %}\n<div style=\"border:2px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text }} Error Failure\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger\" style=\"background-color: Tomato;\">\n<p><br>{{got}} <br>{{\u00a0want }} </p>\n</div>\n</div>\n</div>\n\n{%  endif %}\n{% if  type==\"syntax\" %}\n<div style=\"border:2px solid black;padding:1px;margin:1px;background-color:Tomato;border-radius:4px;\">\n<button type=\"button\" class=\"btn btn-block btn-danger\"\ndata-toggle=\"collapse\" data-target=\"#demo{{feedback.name}}{{num}}\">\n{{ text}} ///// {{\u00a0want }}\n</button>\n<div id=\"demo{{feedback.name}}{{num}}\" class=\"show\">\n<div class=\"card card-danger\" style=\"background-color: black; \">\n<p style=\"color: yellow;\">{{got}} </p>\n</div>\n</div>\n</div>\n{%  endif %}\n{% endfor %}\n</div>\n</div>\n</div>\n\n\n\n",
        "components.py": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n#\n#  source.py\n#\n#  Copyright 2019 Cisse Mamadou [mciissee@gmail.com]\n\nimport importlib\nimport inspect\nimport json\nimport random\nimport sys\nimport uuid\n\n\n\ndef components_source():\n    \"\"\"\n    Used by playexo to retrieve the place this file\n    on the sandbox before a build\n    \"\"\"\n    \n    mod = sys.modules[__name__]\n    return inspect.getsource(mod)\n\n\n# MAP OF CURRENTS COMPONENTS WHERE KEY\n# IS THE NAME OF THE COMPONENT AND VALUE\n# THE SELECTOR OF THE COMPONENT\nSELECTORS = {\n    \"AutomatonDrawer\": \"c-automaton-drawer\",\n    \"AutomatonEditor\": \"c-automaton-editor\",\n    \"CheckboxGroup\":   \"c-checkbox-group\",\n    \"CodeEditor\":      \"c-code-editor\",\n    \"DragDrop\":        \"c-drag-drop\",\n    \"GraphDrawer\":     \"c-graph-drawer\",\n    \"Input\":           \"c-input\",\n    \"MatchList\":       \"c-match-list\",\n    \"MathDrawer\":      \"c-math-drawer\",\n    \"MathInput\":       \"c-math-input\",\n    \"MathMatrix\":      \"c-math-matrix\",\n    \"RadioGroup\":      \"c-radio-group\",\n    \"SortList\":        \"c-sort-list\",\n    \"Text\":            \"c-text\",\n    \"TransfertList\":   \"c-transfert-list\"\n}\n\n\n\nclass Component:\n    \"\"\"\n        Base class of the components.\n    \"\"\"\n    \n    \n    def __init__(self, **kwargs):\n        for k, v in kwargs.items():\n            setattr(self, k, v)\n        \n        if getattr(self, 'cid', '') == '':\n            self.cid = str(uuid.uuid4())\n    \n    \n    def __str__(self):\n        return str(vars(self))\n    \n    \n    @staticmethod\n    def deserialize(target, data):\n        \"\"\"\n        Transforms `target` into the instance of a class extending `Component`\n        and initializes its fields with the given dict `data`.\n\n        - If `target` is already an instance of `Component` values of\n        `data` will be copied into it. (always true if deserialized during grade)\n\n        - if 'target' is a dict (always true during build) and `decorator` key is in it,\n        target will be instancied as an instance of decorator retrieved from the sandbox.\n\n        - If none of the case above are not respected, the method will creates\n        and instance of the type depending of `selector` key of `data`.\n        \"\"\"\n        if isinstance(target, Component):\n            for k, v in data.items():\n                setattr(target, k, v)\n            return target\n        \n        decorator = None\n        \n        if isinstance(target, dict):\n            decorator = data.get('decorator')\n        \n        if decorator:\n            module = importlib.import_module(decorator.lower())\n            return getattr(module, decorator)(**data)\n        \n        selector = data.get('selector')\n        if not selector:\n            msg = 'selector property is required for components'\n            raise Exception(msg)\n        for k in SELECTORS:\n            if SELECTORS[k] == selector:\n                cls = globals().get(k)\n                if not cls:\n                    break\n                return cls(**data)\n        \n        return Component(**data)\n    \n    \n    @staticmethod\n    def sync_context(context):\n        context['Component'] = Component\n        for k in SELECTORS:\n            context[k] = globals()[k]\n        \n        # tranform dict with cid properties to a component\n        for k, v in context.items():\n            if isinstance(v, dict) and 'cid' in v:\n                context[k] = Component.deserialize(v, v)\n        \n        # sync answers with context in grader\n        answers = None\n        for arg in sys.argv:\n            if arg == 'answers.json':\n                with open(arg, \"r\") as f:\n                    answers = json.load(f)\n                    break\n        \n        copy = dict(context)\n        if answers:\n            for k, v in answers.items():\n                if isinstance(v, dict) and \"cid\" in v:\n                    for k2, v2 in copy.items():\n                        if isinstance(v2, Component) and v2.cid == v[\"cid\"]:\n                            context[k2] = Component.deserialize(v2, v)\n    \n    \n    @staticmethod\n    def from_context(context):\n        components = {}\n        for k, v in context.items():\n            if isinstance(v, dict) and 'cid' in v:\n                components[k] = {\n                    e: v[e] for e in v if not e.startswith('_')\n                }\n        return components\n\n\n\nclass SortList(Component):\n    \"\"\"\n    Custom class for SortList component.\n    \"\"\"\n    \n    \n    def __init__(self, **kwargs):\n        self._answer = []\n        super().__init__(**kwargs)\n        self.selector = 'c-sort-list'\n    \n    \n    def remind(self):\n        \"\"\"\n        Saves the current ordering of the items\n        to provides auto correction when self.auto_grade()\n        will be called.\n\n        The method stores the id properties of the items\n        in a list and compares it with the list retrieved\n        during evaluation.\n\n        Then it will randomize the items\n        \"\"\"\n        \n        # since self._answer starts with '_'\n        # it will be hidden to the student\n        \n        self._answer = []\n        for e in self.items:\n            self._answer.append(e['id'])\n        \n        random.shuffle(self.items)\n    \n    \n    def parse_string(self, separator=\"\\n\"):\n        \"\"\"\n        Assumes that current type of self.items is str\n        and initializes items to the JSON format required\n        by the component in JS.\n\n        The method will split the items by using the argument separator.\n        \"\"\"\n        items = self.items.split(separator)\n        self.items = []\n        for e in items:\n            if e.strip():\n                self.items.append({\n                    \"id\":      str(uuid.uuid4()),\n                    \"content\": e,\n                })\n    \n    \n    def auto_grade(self):\n        \"\"\"\n        Provides an grade according to the answer of a student using the list\n        saved during the last call to self.remind()\n        \"\"\"\n        \n        score = 0\n        if len(self._answer) != len(self.items):\n            for e in self.items:\n                e[\"css\"] = \"error-state anim-fade\"\n            return 0\n        \n        for i, e in enumerate(self._answer):\n            self.items[i]['css'] = 'success-state anim-fade'\n            score += 1\n            if self.items[i]['id'] != e:\n                self.items[i]['css'] = 'error-state anim-fade'\n                score -= 1\n        \n        return score / len(self._answer)\n\n\n\nclass AutomatonEditor(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-automaton-editor'\n\n\n\nclass AutomatonDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-automaton-drawer'\n\n\n\nclass CheckboxGroup(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-checkbox-group'\n\n\n\nclass CodeEditor(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-code-editor'\n\n\n\nclass DragDrop(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-drag-drop'\n\n\n\nclass GraphDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-graph-drawer'\n\n\n\nclass Input(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-input'\n\n\n\nclass MatchList(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-match-list'\n\n\n\nclass MathDrawer(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-drawer'\n\n\n\nclass MathInput(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-input'\n\n\n\nclass MathMatrix(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-math-matrix'\n\n\n\nclass RadioGroup(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-radio-group'\n\n\n\nclass Text(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-text'\n\n\n\nclass TransfertList(Component):\n    \n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.selector = 'c-transfert-list'\n"
    },
    "__dependencies": [
        "/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/concept/input/plusmoins.pl",
        "/srv/local/pl/premierlangage/home/Yggdrasil/ComputerScience/python/template/soluce.pl",
        "ComputerScience/python/template/soluceevaluator.py",
        "ComputerScience/python/template/gradesoluce.py",
        "utils/sandboxio.py",
        "builder/none.py",
        "ComputerScience/python/template/feedback2.py",
        "ComputerScience/python/template/template.html"
    ],
    "__extends": [
        {
            "path": "ComputerScience/python/template/soluce.pl",
            "line": "extends=/ComputerScience/python/template/soluce.pl\n",
            "lineno": 7,
            "directory_name": "Yggdrasil"
        }
    ], 
    "author": "Dominique Revuz",
    "title": "Manipulation de nombres",
    "name": "a+b+c+d",
    "tag": "input|print",
    "text": "# input print \nEcrire un programme qui demande \u00e0 l\u2019utilisateur de saisir quatre entiers au clavier (un par ligne), affiche ensuite une valeur par ligne,\n puis leur somme et leur moyenne sur la ligne suivante. Par exemple, si l\u2019utilisateur entre les valeurs\n\t12, 3, 14 et 5,\nle programme affiche :\n\t\n\t12\n\t3\n\t14\n\t5\n\tsomme= 34 , moyenne= 8.5",
    "feedback": "Bravo",
    "fff": "Deux solutions :<br>\n\tprint(\"somme = \",somme,\" , moyenne = \" ,moyenne)<br>\nou la syntaxe avec % mais attention c'est un float<br>\n\tprint(\"somme = %d , moyenne = %f\" % (somme,moyenne))",
    "inputgenerator": "from random import randint \nprint(randint(3,7)+4)\nprint(randint(3,7)+4)\nprint(randint(3,7)+4)\nprint(randint(3,7)+4)",
    "mplsoluce0": "Test1\n12\n3\n14\n5",
    "mplsoluce5": "Test g\u00e9nial\n12\n3333\n1411\n5111",
    "soluce": "a=int(input())\nb=int(input())\nc=int(input())\nd=int(input())\nprint(a)\nprint(b)\nprint(c)\nprint(d)\ns=a+b+c+d\n\nprint(\"somme=\", s ,\", moyenne=\", s/4)",
    "doc": "# Pour que ce grader fonctionne il faut qu'il y ai une balise plsoluce\n# qui contienne des lignes de la forme \n    plsoluce==\n    Nom du test | une ligne d'entr\u00e9e \n    le caract\u00e8re '|\u2018 s\u00e9parant les deux parties (les espaces ne sont pas \u00e9limin\u00e9s en debut ni en fin)\n    ==\n# en suite vous devez fournir une balise soluce \n# contenant une solution de l'exercice \n# dont les r\u00e9sultats seront compar\u00e9s \n# au r\u00e9sultats de l'\u00e9l\u00e8ve\n\npour avoir une entr\u00e9e multi ligne \n\n    mplsoluce0==\n    Nom du test \n    entr\u00e9e\n    sur \n    plusieurs \n    lignes\n    ==\n\n",
    "form": "\n<!-- Do not tabulate this div as the tabulation will appear in the editor -->\n<div id=\"editor\" style=\"resize: both; overflow: auto; border: 1px #E7E7E7 solid; border-width: 1px; border-color: #5bc0de; border-radius: 4px; height: {% if editor.height %}{{ editor.height}}{% else %}400px{% endif %}; #E7E7E7 solid;\">\n{% if answers__.answer and answers__.answer != \"\" %}{{ answers__.answer }}{% else %}{{ code }}{% endif %}</div>\n<input id=\"form_answer\" type=\"hidden\" name=\"form_answer\" style=\"display: none;\" value=\"{% if answers__.answer and answers__.answer != \"\" %}{{ answers__.answer }}{% else %}{{ code }}{% endif %}\">\n<br>\n<script src=\"{{ static('js/ace/ace.js') }}\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"{{ static('js/ace/ext-modelist.js') }}\"></script>\n<script>\n    var editor = ace.edit('editor');\n    editor.setTheme(\"{{ user_settings__.editor_theme.template }}\");\n    editor.session.setMode(\"ace/mode/{% if editor.language %}{{editor.language}}{% else %}python{% endif %}\");\n    editor.session.setTabSize({% if editor.tabsize %}{{ editor.tabsize }}{% else %}4{% endif %});\n\n    document.getElementById('editor').style.fontSize=\"{% if editor.fontsize %}{{ editor.fontsize }}{% else %}12px{% endif %}\";\n\n    \n    var input = $('input[name=\"form_answer\"]');\n        editor.getSession().on(\"change\", function() {\n        input.val(editor.getSession().getValue());\n    });\n</script>\n\n\n\n",
    "settings": {
        "allow_reroll": "1"
    },
    "seed": 26,
    "activity_id__": 45
}